/*
*	Usage: 
*		gradlew - Builds the NativeScript Android App Package using an application project template.
*/

defaultTasks 'createPackage'

import groovy.json.JsonSlurper //used to parse package.json
import groovy.json.JsonBuilder
import groovy.json.JsonOutput

def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')
def localMetadataGen = "../android-metadata-generator/dist/tns-android-metadata-generator-0.0.1.tgz"
def distDir = "$rootDir/dist"
def pVersion = "no package version was provided by build.gradle build"
def arVersion = "no commit sha was provided by build.gradle build"

task checkEnvironmentVariables {
	if ("$System.env.JAVA_HOME" == "" || "$System.env.JAVA_HOME" == "null") {
		throw new GradleException("Set JAVA_HOME to point to the correct Jdk location\n");
	}
	if ("$System.env.ANDROID_HOME" == "" || "$System.env.ANDROID_HOME" == "null") {
		throw new GradleException("Set ANDROID_HOME to point to the correct Android SDK location\n");
	}
	if ("$System.env.GIT_COMMIT" == "null") {
		logger.warn("Warning: The GIT_COMMIT is not set. This NativeScript Android Runtime will not be tagged with the git commit it is build from\n");
	}
	if(project.hasProperty("devmode") == true && !project.hasProperty("metadataGenSrc") && !file("../android-metadata-generator").exists()) {
		throw new GradleException("../android-metadata-generator directory not found and no metadataGenSrc option specified. Clone the android-metadata-generator repo first.\n");
	}
	if(project.hasProperty("metadataGen") && !file("../android-metadata-generator/dist/tns-android-metadata-generator-0.0.1.tgz").exists()) {
		throw new GradleException("android-metadata-generator build output not found and no metadataGen option specified. Build android-metadata-generator first.\n");
	}
}

// task checkAndroidCommand(type:Exec) {
// 	if(isWinOs) {
// 		commandLine "cmd", "/c", "android", "-h"
// 	}
// 	else {
// 		commandLine "android", "-h"
// 	}

// 	ignoreExitValue = true

// 	doLast {
// 		def successResult = isWinOs ? 0 : 1

// 		if (execResult.exitValue != successResult) {//1 is ok result for android tool
// 			throw new GradleException("\n--> 'android' command not found. Set the PATH variable to include the path to Android SDK Tools directory.\n\nError: " + errorOutput + "\nexitValue: " + execResult.exitValue)
// 		}
// 	}
// }

task cleanDistDir (type: Delete) << {
	delete distDir
}

task createDistDir  << {
	def distF = new File(distDir)
	distF.mkdirs()
}

task copyProjectTemplate (type: Copy) {
	from "$rootDir/build-artifacts/project-template-gradle"
	into "$rootDir/dist/framework"
}

task copyPackageJson (type: Copy) {
		from "$rootDir/package.json"
		into "$rootDir/dist"
}

task getPackageVersion << {
	String content = new File("$rootDir/package.json").getText("UTF-8")
	def jsonSlurper = new JsonSlurper()
	def packageJsonMap = jsonSlurper.parseText(content)
	
	pVersion = packageJsonMap.version
	
	println "The package version from package.json is '${pVersion}'"
}

task getCommitVersion << {
	if("$System.env.GIT_COMMIT" != "null") {        
		String content = "$System.env.GIT_COMMIT"
		arVersion = content.trim()
	}
}

task generateRuntime (type: Exec)   {
	doFirst {
		workingDir "$rootDir/runtime"
		if(isWinOs) {
			commandLine "cmd", "/c", "gradlew", "build", "-PpackageVersion=${pVersion}", "-PgitCommitVersion=${arVersion}"
		}
		else {
			commandLine "./gradlew", "build", "-PpackageVersion=${pVersion}", "-PgitCommitVersion=${arVersion}"
		}
	}
}

task copyGeneratedRuntime << {
	copy {
		from "$rootDir/runtime/build/outputs/aar/runtime-release.aar"
		into "$rootDir/dist/framework/libs/runtime-libs/"
		rename "runtime-release.aar", "nativescript.aar"
	}
}

task copyBindingGeneratorLib << {
	copy {
		from "$rootDir/binding-generator/build/outputs/aar/binding-generator-release.aar"
		into "$rootDir/dist/framework/libs/runtime-libs/"
		rename "binding-generator-release.aar", "binding-generator.aar"
	}
}

task generateMetadataGeneratorJar (type: Exec) {
	doFirst {
		workingDir "$rootDir/android-metadata-generator"
		
		if(isWinOs) {
			commandLine "cmd", "/c", "gradlew", "jarmg"
		}
		else {
			commandLine "./gradlew", "jarmg"
		}
	}
}

task copyGeneratedMetadataGeneratorJar << {
	copy {
		from "$rootDir/android-metadata-generator/dist"
		into "$rootDir/dist/framework/build-tools"
		rename "android-metadata-generator.jar", "metadata-generator.jar"
	}
}

task createNpmPackage (type: Exec) {
	doFirst {
		workingDir "$rootDir/dist"
		
		if(isWinOs) {
			commandLine "cmd", "/c", "npm", "pack"
		}
		else {
			commandLine "npm", "pack"
		}
	}
}

task setPackageVersionInPackageJsonFile << {
	if (project.hasProperty("packageVersion")) {
		def inputFile = new File("$rootDir/dist/package.json")
		def json = new JsonSlurper().parseText(inputFile.text)
		json.version = json.version + "-" + packageVersion
		def jb = new JsonBuilder(json);
		inputFile.text = JsonOutput.prettyPrint(jb.toString())
	}
}

task copyReadme (type: Copy) {
	from "README.md"
	into "$rootDir/dist"
}

//clean and set up dirs
createDistDir.dependsOn(cleanDistDir)


//copy framework structure
copyProjectTemplate.dependsOn(createDistDir)
copyPackageJson.dependsOn(copyProjectTemplate)
setPackageVersionInPackageJsonFile.dependsOn(copyPackageJson)

//get version from package json
getPackageVersion.dependsOn(setPackageVersionInPackageJsonFile)
getCommitVersion.dependsOn(getPackageVersion)

//generate runtime and copy into framework structure
generateRuntime.dependsOn(getCommitVersion)

//generateRuntime.dependsOn(build)

tasks.whenTaskAdded { task ->
                if (task.getName() == "build")
                {
                    generateRuntime
                } 
            }

copyGeneratedRuntime.dependsOn(generateRuntime)
copyBindingGeneratorLib.dependsOn(generateRuntime)

//generate metadata generator and copy into framework structure
generateMetadataGeneratorJar.dependsOn(copyGeneratedRuntime, copyBindingGeneratorLib)
copyGeneratedMetadataGeneratorJar.dependsOn(generateMetadataGeneratorJar)

copyReadme.dependsOn(copyGeneratedMetadataGeneratorJar)

//pack runtime
createNpmPackage.dependsOn(copyReadme)

task createPackage {
	description "Builds the NativeScript Android App Package using an application project template."
	dependsOn cleanDistDir,
            createDistDir,
            copyProjectTemplate,

            copyPackageJson,
			setPackageVersionInPackageJsonFile,

            getPackageVersion,
            getCommitVersion,
			
            generateRuntime,

            copyGeneratedRuntime,
			copyBindingGeneratorLib,
            generateMetadataGeneratorJar,
            copyGeneratedMetadataGeneratorJar,
            copyReadme,
            createNpmPackage


	println "Creating NativeScript Android Package"			
}