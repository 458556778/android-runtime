/*
*	Script builds apk in release or debug mode
*	To run: 
*			gradle assembleRelease -Prelease
*			gradle assembleDebug
*/

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:1.3.0"
    }
}

apply plugin: "com.android.application"

android {
	compileSdkVersion 22
    buildToolsVersion "22.0.1"
	
	defaultConfig {
		minSdkVersion 17
		targetSdkVersion 22
	}
	
	sourceSets.main {
        jniLibs.srcDir "libs/jni"
    }
	
	signingConfigs {
        release {
            if(project.hasProperty("release")) {
				storeFile file(System.console().readLine("\n\$ Enter keystore path: "))
				storePassword new String(System.console().readPassword("\n\$ Enter keystore password: "))
				keyAlias System.console().readLine("\n\$ Enter key alias: ")
				keyPassword new String(System.console().readPassword("\n\$ Enter key password: "))
			}
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

repositories {
    jcenter()
    // used for local *.AAR files
    flatDir {
    	dirs 'libs/aar'
	}
}

def nodeModulesDir = "../../node_modules/"

dependencies {
    compile "com.android.support:support-v4:22.2.0"
    compile "com.android.support:appcompat-v7:22.2.0"

    // take all jars within the libs dir
	compile fileTree(dir: "libs", include: ["**/*.jar"])

	// take all jars within the node_modules dir
	compile fileTree(dir: nodeModulesDir, include: ["**/*.jar"])
}

task copyAarDependencies(type: Copy) {
	// we need to copy all dependencies into a flat dir, as pointed by the repositories setup
	from fileTree(dir: nodeModulesDir, include: ["**/*.aar"]).files
	into "libs/aar"
}

task addAarDependencies {
	// manually traverse all the locally copied AAR files and add them to the dependency list
	FileTree tree = fileTree(dir: "libs/aar", include: ["**/*.aar"])
	tree.each { File file ->
		// remove the extension of the file (.aar)
		def length = file.name.length() - 4
		def fileName = file.name[0..<length]
		project.dependencies.add("compile", [name: fileName, ext: "aar"])
	}
}

task collectAllJars(type: Copy) {
	def explodedAarDir = project.buildDir.getAbsolutePath() + "/intermediates/exploded-aar/"
	def sdkPath = android.sdkDirectory.getAbsolutePath();
	def androidJar = sdkPath + "/platforms/" + android.compileSdkVersion + "/android.jar"	

	from configurations.compile
	from explodedAarDir
	from androidJar
	include '**/*.jar'
	includeEmptyDirs = false
	into "metadata/libs"
}

task ensureMetadataOutDir {
	def outputDir = file("$rootDir/metadata/output")
	outputDir.mkdirs()
}

task buildMetadata(type: JavaExec) {
	outputs.upToDateWhen {		
		!collectAllJars.didWork
	}

	main '-jar'
	def str = new LinkedList <String> ();
	str.add("build-tools/metadata-generator.jar")
	str.add("metadata/libs")
	str.add("metadata/output")

	args str.toArray()
}

task copyMetadata(type: Copy) {
	outputs.upToDateWhen {
		!buildMetadata.didWork
	}

	from "metadata/output"
	into "src/main/assets/metadata"
}

task cleanLocalAarFiles(type: Delete) {
	delete fileTree(dir: "libs/aar", include: ["*.aar"])
}

// prepare task chain
// 1. Copy *.aar dependencies
// 2. Add *.aar dependencies
// 3. Build
// 4. Clean libs/aar folder
// 5. Ensure metadata out directory
// 6. Collect all jars
// 7. Build metadata
// 8. Copy metadata

addAarDependencies.dependsOn(copyAarDependencies)
preBuild.dependsOn(addAarDependencies)
cleanLocalAarFiles.dependsOn(build)
collectAllJars.dependsOn(cleanLocalAarFiles)
ensureMetadataOutDir.dependsOn(collectAllJars)
buildMetadata.dependsOn(ensureMetadataOutDir)
copyMetadata.dependsOn(buildMetadata)

task buildapk {
	dependsOn copyMetadata
}