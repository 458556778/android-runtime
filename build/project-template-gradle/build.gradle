/*
*	Script builds apk in release or debug mode
*	To run: 
*			gradle buildapk -Prelease (release mode)
*			gradle buildapk (debug mode -> default)
* 	Options:
*			-Prelease  //this flag will run build in release mode
*			-PksPath=[path_to_keystore_file]
*			-PksPassword=[password_for_keystore_file]
*			-Palias=[alias_to_use_from_keystore_file]
*			-Ppassword=[password_for_alias]
*
*			-PtargetSdk=[target_sdk] (default is 22)
*			-PbuildToolsVersion=[build_tools_version] (default is 22.0.1)
*			-PsupportVersion=[support_version] (default (22.2.0)
*			-PcompileSdk=[compile_sdk_version] (default 22)
*
*			-PrunSBGenerator //this flag will triger static binding generation
*/

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:1.3.1"
    }
}

apply plugin: "com.android.application"

def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')
def metadataParams = new LinkedList <String> ()
def allJarPaths = new LinkedList <String> ()
def createPluginConfigFile = false
def configStage = "\n:config phase: "
def nodeModulesDir = "../../node_modules/"
def libDir = "../../lib/Android/"
def pluginNames = new ArrayList<String>()
def configDir = file(nodeModulesDir)
def appResExists = false
def appResourcesName = "NativescriptAppResources"

def compiteCompileSdkVersion () {
	if(project.hasProperty("compileSdk")) {
		return compileSdk
	}
	else {
		return 23
	}
}

def computeTargetSdkVersion() {
	if(project.hasProperty("targetSdk")) {
		return targetSdk
	}
	else {
		return 23
	}
}

def computeBuildToolsVersion() {
	if(project.hasProperty("buildToolsVersion")) {
		return buildToolsVersion
	}
	else {
		return "22.0.1"
	}
}

project.ext.selectedBuildType = project.hasProperty("release") ? "release" : "debug"

def renameResultApks (variant) {
	def name
    variant.outputs.each { output ->

        def apkDirectory = output.packageApplication.outputFile.parentFile
		def apkNamePrefix = rootProject.name + "-" + variant.buildType.name

        if (output.zipAlign) {
			if (project.ext.selectedBuildType == variant.buildType.name) {
				output.zipAlign.dependsOn(buildMetadata)
			}

            name = apkNamePrefix + ".apk"
            output.outputFile = new File(apkDirectory, name);
        }

        name = apkNamePrefix + "-unaligned.apk"
        output.packageApplication.outputFile = new File(apkDirectory, name);

		if (output.packageApplication && (project.ext.selectedBuildType == variant.buildType.name)) {
			buildMetadata.dependsOn(output.packageApplication)
			project.ext.currentApkFile = output.packageApplication.outputFile.getAbsolutePath().replace('\\', '/')
		}
    }
}


////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// CONFIGURATIONS ///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

android {
	compileSdkVersion compiteCompileSdkVersion()
    buildToolsVersion computeBuildToolsVersion()
	
	defaultConfig {
		minSdkVersion 17
		targetSdkVersion computeTargetSdkVersion()
	}
	
	sourceSets.main {
        jniLibs.srcDir "libs/jni"
    }
	
	signingConfigs {
        release {
            if(project.hasProperty("release")) {
				if(project.hasProperty("ksPath") &&
					project.hasProperty("ksPassword") &&
					project.hasProperty("alias") &&
					project.hasProperty("password"))
				{
					storeFile file(ksPath)
					storePassword ksPassword
					keyAlias alias
					keyPassword password
				}
			}
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
	
	applicationVariants.all { variant ->
		renameResultApks(variant)
	}
}

repositories {
    jcenter()
    // used for local *.AAR files
    flatDir {
    	dirs 'libs/aar'
	}
}

dependencies {
	def suppotVer = "22.2.0";
	if(project.hasProperty("supportVersion")) {
		suppotVer = supportVersion
	}
	
    compile "com.android.support:support-v4:$suppotVer"
    compile "com.android.support:appcompat-v7:$suppotVer"

    // take all jars within the libs dir
	compile fileTree(dir: "libs", include: ["**/*.jar"])

	// take all jars within the node_modules dir
	compile fileTree(dir: nodeModulesDir, include: ["**/*.jar"])

	// take all jars within the lib/Android dir
	compile fileTree(dir: libDir, include: ["**/*.jar"])
	
	//when gradle has aar support this will be preferred instead of addAarDependencies
	// compile files("$rootDir/libs/aar") {
        // builtBy 'copyAarDependencies'
    // }

}


////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// CONFIGURATION PHASE //////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////



task pluginExtend {
	description "applies additional configuration"

	configDir.eachFileRecurse(groovy.io.FileType.FILES) {
		if(it.name.equals('include.gradle')) {
			println "\t+applying configuration from: " + it
			apply from: it
		}
	}
}

//// doesn't work unless task is explicitly called (TODO: research configurations hook)
// addAarDependencies.dependsOn(copyAarDependencies)
// createDefaultIncludeFiles.dependsOn(addAarDependencies)
// createPluginsConfigFile.dependsOn(createDefaultIncludeFiles)
// pluginExtend.dependsOn(createPluginsConfigFile)


////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// BEFORE EXECUTION /////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

// we need to copy all dependencies into a flat dir, as pointed by the repositories configurations at the top
task copyAarDependencies (type: Copy) {
	println "$configStage copyAarDependencies"
	from fileTree(dir: nodeModulesDir, include: ["**/*.aar"]).files
	into "libs/aar"
}

task addAarDependencies <<  {
	println "$configStage addAarDependencies"
	// manually traverse all the locally copied AAR files and add them to the project compilation dependencies list
	FileTree tree = fileTree(dir: "libs/aar", include: ["**/*.aar"])
	tree.each { File file ->
		// remove the extension of the file (.aar)
		def length = file.name.length() - 4
		def fileName = file.name[0..<length]
		println "\t+adding dependency: " + file.getAbsolutePath()
		project.dependencies.add("compile", [name: fileName, ext: "aar"])
	}
}


////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// EXECUTUION PHASE /////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

task cleanLocalAarFiles(type: Delete) {
	delete fileTree(dir: "libs/aar", include: ["*.aar"])
}

task ensureMetadataOutDir {
	def outputDir = file("$rootDir/metadata/output")
	outputDir.mkdirs()
}

task collectAllJars {
	description "gathers all paths to jar dependencies before building metadata with them"
	
	def explodedAarDir = project.buildDir.getAbsolutePath() + "/intermediates/exploded-aar/"
	def sdkPath = android.sdkDirectory.getAbsolutePath();
	def androidJar = sdkPath + "/platforms/" + android.compileSdkVersion + "/android.jar"
	
	doFirst {
		configurations.compile.each { File dependencyFile ->
			// println "\t+" + dependencyFile.getAbsolutePath()
			allJarPaths.add(dependencyFile.getAbsolutePath())
		}
		
		allJarPaths.add(androidJar);
		
		def ft = fileTree(dir: explodedAarDir, include: "**/*.jar")
		ft.each { currentJarFile ->
			allJarPaths.add(currentJarFile.getAbsolutePath())
		}
		
		metadataParams.add("metadata-generator.jar")
		metadataParams.add("../metadata/output")
		for(def i = 0; i < allJarPaths.size(); i++) {
			metadataParams.add(allJarPaths.get(i));
		}

		def classesDir = "$rootDir/build/intermediates/classes"

		def classesSubDirs = new File(classesDir).listFiles()

		def selectedBuildType = project.ext.selectedBuildType

		for (File subDir: classesSubDirs) {
			if (!subDir.getName().equals(selectedBuildType)) {
				def subDirBuildType = new File(subDir, selectedBuildType)
				if (subDirBuildType.exists()) {
					metadataParams.add(subDirBuildType.getAbsolutePath());
				}
			}
		}

		def classesDirBuildType = new File(classesDir, selectedBuildType)
		if (classesDirBuildType.exists()) {
			metadataParams.add(classesDirBuildType.getAbsolutePath())
		}
	}
}


task buildMetadata (type: JavaExec) {
	description "builds metadata with provided jar dependencies"
	
	inputs.files(allJarPaths)
	inputs.dir("build/intermediates/classes")

	outputs.files("metadata/output/treeNodeStream.dat", "metadata/output/treeStringsStream.dat", "metadata/output/treeValueStream.dat")

	doFirst {
		workingDir "build-tools"

		main "-jar"

		args metadataParams.toArray()
	}

	doLast {
		copy {
			from "metadata/output"
			into "src/main/assets/metadata"
		}

        def zip_properties = new HashMap<String, String>()
        zip_properties.put("create", "true")
        zip_properties.put("encoding", "UTF-8")

		def currentApk = project.ext.currentApkFile

		def zip_disk = URI.create("jar:file:/" + currentApk);

		def zipfs
		def pathInZipfile
		try {
			zipfs = java.nio.file.FileSystems.newFileSystem(zip_disk, zip_properties)

			def filesToDelete = ["assets/metadata/treeNodeStream.dat", "assets/metadata/treeStringsStream.dat", "assets/metadata/treeValueStream.dat",
								"META-INF/CERT.RSA", "META-INF/CERT.SF", "META-INF/MANIFEST.MF"]

			for (def file: filesToDelete) {
				 pathInZipfile = zipfs.getPath(file)
				if (java.nio.file.Files.exists(pathInZipfile)) {
					java.nio.file.Files.delete(pathInZipfile)
				}
			}

			pathInZipfile = zipfs.getPath("assets/metadata")
			if (!java.nio.file.Files.exists(pathInZipfile)) {
				java.nio.file.Files.createDirectory(pathInZipfile)
			}

			def metadataFiles = ["treeNodeStream.dat", "treeStringsStream.dat", "treeValueStream.dat"]
			for (def mdFile: metadataFiles) {
				pathInZipfile = java.nio.file.Files.createFile(zipfs.getPath("assets/metadata/" + mdFile))

				def mdFilePath = java.nio.file.Paths.get("$rootDir/metadata/output/" + mdFile)
				def data = java.nio.file.Files.readAllBytes(mdFilePath)

				java.nio.file.Files.write(pathInZipfile, data, java.nio.file.StandardOpenOption.WRITE)
			}
		} finally {
			if (zipfs != null) {
				zipfs.close()
			}
		}

		def androidHome = new File(System.properties['user.home'], ".android")
		def keyStoreFile = new File(androidHome, "debug.keystore")

		def cmd = "jarsigner -sigalg SHA1withRSA -digestalg SHA1 " + (project.ext.selectedBuildType.equals("release")
					? ("-storepass " + project.password + " -keypass " + project.ksPassword + " -keystore \"" + project.ksPath + "\" \"" +  currentApk + "\" " + project.alias)
					: ("-storepass android -keypass android -keystore \"" + keyStoreFile.getAbsolutePath() + "\" \"" +  currentApk + "\"  androiddebugkey"))

		exec {
			if (isWinOs) {
				commandLine "cmd", "/c", cmd
			}
			else {
				commandLine cmd
			}
		}
	}
}


task deleteExplodedAarFolder (type: Delete) {

	outputs.upToDateWhen {
		!buildMetadata.didWork
	}
	
	def explodedAarDir = project.buildDir.getAbsolutePath() + "/intermediates/exploded-aar"
	delete explodedAarDir
}


////////////////////////////////////////////////////////////////////////////////////
////////////////////////////// OPTIONAL TASKS //////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
task runBindingGenerator(dependsOn: "ing:jar") {
	rootProject.jarsDir = allJarPaths
}
runBindingGenerator.dependsOn("bg:jar")

task rbg (dependsOn: "asbg:generatebindings")



////////////////////////////////////////////////////////////////////////////////////
////////////////////////////// EXECUTION ORDER /////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

// -- configuration phase
// 1. Copy *.aar dependencies
// 2. Add *.aar dependencies
// 3. create default include files
// 4. create plugins config file
// 5. plugin extend (apply from include files)

// --execution phase
ensureMetadataOutDir.dependsOn(cleanLocalAarFiles)
collectAllJars.dependsOn(ensureMetadataOutDir)
buildMetadata.dependsOn(collectAllJars)

//DO NOT UNCOMMENT
// mergeAssets.dependsOn(copyMetadata) -> look in CONFIGURATIONS(top) in android.applicationVariants to see how it's done

task buildapk {
	// problem is compile dependencies need to be changed before configuration stage
	// and this is the only way so far
	tasks.copyAarDependencies.execute()
    tasks.addAarDependencies.execute()

	//done to build only necessary apk
	if(project.hasProperty("release")) {
		dependsOn assembleRelease
	}
	else {
		dependsOn assembleDebug
	}
	
	dependsOn deleteExplodedAarFolder
}