def distDir = "$rootDir/dist"
def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')
def pathToAndroidSdkPlatforms = "$System.env.ANDROID_HOME" + "/platforms"
def pathToBindingGeneratorJar = "../binding-generator/Generator/build/libs/Generator.jar"

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
    }
}

apply plugin: 'com.android.library'

android {
	compileSdkVersion 22
    buildToolsVersion "22.0.1"
	
	defaultConfig {
        minSdkVersion 19
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }
	
	sourceSets {
		main.manifest.srcFile "./AndroidManifest.xml"
		main.java.srcDir "src"
		// main.output.classesDir = "$rootDir/build/classes"
	}
	
	//TODO: remove this and fix related problems later
	lintOptions {
		abortOnError false
	}
}

// sourceSets {
	// main.java.srcDir "src"
	// main.output.classesDir = "$rootDir/build/classes"
// }

repositories {
    jcenter()
}

dependencies {
	def sdkPath = android.sdkDirectory.getAbsolutePath();
	def androidJar = sdkPath + "/platforms/" + android.compileSdkVersion + "/android.jar"	
    
	compile 'com.android.support:support-v4:22.2.0'
    compile 'com.android.support:appcompat-v7:22.2.0'
	compile files(androidJar)
	compile fileTree(dir: 'libs', include: ['*.jar'])
	compile files(pathToBindingGeneratorJar)
}

task cleanJavaBin (type: Delete) {
	delete "$rootDir/bin"
}

task cleanDistDir (type: Delete) {
	delete distDir
}

task createDistDir {
	doLast {
		def distF = new File(distDir)
		distF.mkdirs()
	}
}

task setNdkConfigToRelease {
	def mkFile = file("$rootDir/jni/Application.mk")
	
	String contents = new File("$rootDir/jni/Application.mk").getText("UTF-8")
	contents = contents.replaceAll( /APP_OPTIM\s*?\:=\s*?debug/, "APP_OPTIM := release")
	new File("$rootDir/jni/Application.mk").write(contents, "UTF-8")
}

task buildCppRuntime (type: Exec) {
	commandLine "cmd", "/c"
	args "ndk-build"
}

task copyCppRuntime {
	doLast {
		copy {
			from "$rootDir/libs"
			into "$rootDir/dist/libs"
		}
	}	
}

task cleanCppRuntime (type: Delete){
	delete "$rootDir/libs/armeabi-v7a", "$rootDir/libs/x86"
}

task revertNdkConfiguration (type: Exec) {
	if(isWinOs) {
		commandLine "cmd", "/c"
	}
	
	args "git", "checkout", "--", "./jni/Application.mk"
}

task generateBindingGeneratorClasses (type: Exec ) {
	workingDir "../binding-generator/Generator"

	if(isWinOs) {
		commandLine "cmd", "/c"
	}

	args "gradle", "build", "-PoutClassesDir=$rootDir/build/intermediates/classes/debug"
}


//clean
cleanJavaBin.dependsOn(cleanDistDir)
createDistDir.dependsOn(cleanJavaBin)

preBuild.dependsOn(generateBindingGeneratorClasses) //generateBindingGeneratorClasses needs to be done before it is needed as a dependency for compilation

setNdkConfigToRelease.dependsOn(generateBindingGeneratorClasses) //set to release and build
// buildCppRuntime.dependsOn(setNdkConfigToRelease)
copyCppRuntime.dependsOn(setNdkConfigToRelease)
cleanCppRuntime.dependsOn(copyCppRuntime)
revertNdkConfiguration.dependsOn(cleanCppRuntime) //rever to debug after build

// compileJava.dependsOn(revertNdkConfiguration)
// jar.dependsOn(compileJava)
// build.dependsOn(compileJava)
build.dependsOn(revertNdkConfiguration)

task buildRuntime {
	dependsOn build
}