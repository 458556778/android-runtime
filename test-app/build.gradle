def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
    }
}

apply plugin: "com.android.application"


def computeTargetSdkVersion() {
	if(project.hasProperty("targetSdk")) {
	
		return targetSdk
	}
	else {
		return 22
	}
}

android {
	compileSdkVersion 22
    buildToolsVersion "22.0.1"
	
	defaultConfig {
		minSdkVersion 17
		targetSdkVersion computeTargetSdkVersion()
	}
	
	sourceSets.main {
		//manifest is necessary to generate a BuildConfig.java file necessary for build
		manifest.srcFile "./AndroidManifest.xml"
		java.srcDir "src"
		res.srcDir "res"
		assets.srcDir "assets"
        jniLibs.srcDir "libs/jni"
    }
	
	signingConfigs {
        release {
            if(project.hasProperty("release")) {
				if(project.hasProperty("ksPath") &&
					project.hasProperty("ksPassword") &&
					project.hasProperty("alias") &&
					project.hasProperty("password"))
				{
					storeFile file(ksPath)
					storePassword ksPassword
					keyAlias alias
					keyPassword password
				}
			}
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
	
	applicationVariants.all { variant ->
		def tsk = variant.mergeAssets
		tsk.dependsOn(copyMetadata)
	}
}

repositories {
    jcenter()
}

dependencies {
	def sdkPath = android.sdkDirectory.getAbsolutePath();
	def androidJar = sdkPath + "/platforms/" + android.compileSdkVersion + "/android.jar"	
	def nativescriptJar = "../dist/framework/libs/nativescript.jar"
    
	compile 'com.android.support:support-v4:22.2.0'
	compile files(nativescriptJar)
    // compile 'com.android.support:appcompat-v7:22.2.0'
	// compile files(androidJar)
}

task cleanLibs (type: Delete) {
	delete "$rootDir/libs"
}

task copyLibNativescriptLibrary (type: Copy) {
	from "../dist/framework/libs"
	into "$rootDir/libs"
}

task collectAllJars(type: Copy) {
	def sdkPath = android.sdkDirectory.getAbsolutePath();
	def androidJar = sdkPath + "/platforms/" + android.compileSdkVersion + "/android.jar"	

	from configurations.compile
	from androidJar
	include "**/*.jar"
	includeEmptyDirs = false
	into "$rootDir/metadata/libs"
}

task ensureMetadataOutDir {
	def outputDir = file("$rootDir/metadata/output")
	outputDir.mkdirs()
}

task buildMetadata(type: JavaExec) {
	outputs.upToDateWhen {		
		!collectAllJars.didWork
	}

	main '-jar'
	def str = new LinkedList <String> ();
	str.add("../dist/framework/build-tools/metadata-generator.jar")
	str.add("metadata/libs")
	str.add("metadata/output")

	args str.toArray()
}

task copyMetadata(type: Copy) {
	outputs.upToDateWhen {
		!buildMetadata.didWork
	}

	from "metadata/output"
	into "$rootDir/assets/metadata"
}

cleanLibs.dependsOn(clean)
copyLibNativescriptLibrary.dependsOn(cleanLibs)
preBuild.dependsOn(copyLibNativescriptLibrary)

ensureMetadataOutDir.dependsOn(collectAllJars)
buildMetadata.dependsOn(ensureMetadataOutDir)
copyMetadata.dependsOn(buildMetadata)

task buildapk {
	
	if(project.hasProperty("release")) {
		dependsOn assembleRelease
	}
	else {
		dependsOn assembleDebug
	}
}

///// install apk
task installApk (type: Exec) {
	println "---- attempting to install buit apk"
	
	if(isWinOs) {
		commandLine "cmd", "/c", "node", "$rootDir/tasks/deploy-apk.js", "$rootDir/build/outputs/apk/test-app-debug.apk"
	}
	else {
		commandLine "node", "$rootDir/tasks/deploy-apk.js", "$rootDir/build/outputs/apk/test-app-debug.apk"
	}
}

task deletePreviousResultXml (type: Exec) {
	println "---- removing previous android_unit_test_results.xml"
	
	if(isWinOs) {
		commandLine "cmd", "/c", "adb", "shell", "rm", "/sdcard/android_unit_test_results.xml"
	}
	else {
		commandLine "adb", "shell", "rm", "/sdcard/android_unit_test_results.xml"
	}
}

task startInstalledApk (type: Exec) {
	println "---- starting installed apk"
	
	if(isWinOs) {
		commandLine "cmd", "/c", "adb", "shell", "am", "start", "-n", "com.tns.android_runtime_testapp/com.tns.NativeScriptActivity", "-a", "android.intent.action.MAIN", "-c", "android.intent.category.LAUNCHER"
	}
	else {
		commandLine "adb", "shell", "am", "start", "-n", "com.tns.android_runtime_testapp/com.tns.NativeScriptActivity", "-a", "android.intent.action.MAIN", "-c", "android.intent.category.LAUNCHER"
	}
}

task waitForUnitTestResultFile (type: Exec) {	
	println "---- waiting for tests to finish..."
	
	if(isWinOs) {
		commandLine "cmd", "/c", "node", "$rootDir/tasks/try_to_find_test_result_file.js"
	}
	else {
		commandLine "node", "$rootDir/tasks/try_to_find_test_result_file.js"
	}
}

task createDistFolder {
	def distDir = file("$rootDir/dist")
	distDir.mkdirs()
}

task copyResultToDist (type: Exec) {
	println "---- copying result to dist"
	workingDir "$rootDir/dist/"
	
	if(isWinOs) {
		commandLine "cmd", "/c", "adb", "pull", "/sdcard/android_unit_test_results.xml"
	}
	else {
		commandLine "adb", "pull", "/sdcard/android_unit_test_results.xml"
	}
}

installApk.dependsOn(buildapk)
deletePreviousResultXml.dependsOn(installApk)
startInstalledApk.dependsOn(deletePreviousResultXml)
waitForUnitTestResultFile.dependsOn(startInstalledApk)
createDistFolder.dependsOn(waitForUnitTestResultFile)
copyResultToDist.dependsOn(createDistFolder)

task runtest {
	dependsOn copyResultToDist
}