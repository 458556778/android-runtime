apply plugin: 'com.android.model.library'

model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.2"

        defaultConfig.with {
            minSdkVersion.apiLevel = 17
            targetSdkVersion.apiLevel = 22
        }
    }

    android.ndk {
        moduleName = "NativeScript"
        platformVersion = 17
        cppFlags.addAll(["-I${file("src/main/jni")}".toString(),
                         "-I${file("src/main/jni/include")}".toString()
        ])

        cppFlags.addAll(["-std=c++11", "-fexceptions"])
        CFlags.addAll(["-Wno-error=format-security", "-g"])

        ldLibs.addAll(["android", "dl", "log", "atomic", "z"])

        //stl     = "c++_static"
        stl = "stlport_static"

        abiFilters.addAll(["armeabi-v7a", "x86", "arm64-v8a"])
    }
    // jni is the default dir; config this if yours is in different directory
    android.sources {
        main {
            java {
                source {
                    srcDirs 'src/main/java'
                }
            }

            jni {
                source {
                    srcDirs 'src/main/jni'
                }

                exportedHeaders {
                    srcDir "src/main/jni/include"
                }

                dependencies {
                    library "v8" linkage "static"
                }
            }
        }
    }

//    android.buildTypes {
//        release {
//            minifyEnabled = false
//            proguardFiles.add(file('proguard-rules.txt'))
//        }
//    }

    // Turn on hard float support in armeabi-v7a
    android.abis {
        create("armeabi-v7a") {
            cppFlags.addAll(["-mhard-float", "-D_NDK_MATH_NO_SOFTFP=1", "-mfloat-abi=hard"])
            ldLibs.add("m_hard")
            ldFlags.add("-Wl,--no-warn-mismatch")

            ldLibs.add("${file("src/main/libs/armeabi-v7a/libv8_base.a")}".toString())
            ldLibs.add("${file("src/main/libs/armeabi-v7a/libv8_libplatform.a")}".toString())
            ldLibs.add("${file("src/main/libs/armeabi-v7a/libv8_libbase.a")}".toString())
            ldLibs.add("${file("src/main/libs/armeabi-v7a/libv8_nosnapshot.a")}".toString())
            ldLibs.add("${file("src/main/libs/armeabi-v7a/libzip.a")}".toString())
        }

        create("x86") {
            cppFlags.addAll(["-mhard-float", "-D_NDK_MATH_NO_SOFTFP=1"])
            ldFlags.add("-Wl,--no-warn-mismatch")

            ldLibs.add("${file("src/main/libs/x86/libv8_base.a")}".toString())
            ldLibs.add("${file("src/main/libs/x86/libv8_libplatform.a")}".toString())
            ldLibs.add("${file("src/main/libs/x86/libv8_libbase.a")}".toString())
            ldLibs.add("${file("src/main/libs/x86/libv8_nosnapshot.a")}".toString())
            ldLibs.add("${file("src/main/libs/x86/libzip.a")}".toString())
        }

        create("arm64-v8a") {
            cppFlags.addAll(["-mhard-float", "-D_NDK_MATH_NO_SOFTFP=1"])
            ldFlags.add("-Wl,--no-warn-mismatch")

            ldLibs.add("${file("src/main/libs/arm64-v8a/libv8_base.a")}".toString())
            ldLibs.add("${file("src/main/libs/arm64-v8a/libv8_libplatform.a")}".toString())
            ldLibs.add("${file("src/main/libs/arm64-v8a/libv8_libbase.a")}".toString())
            ldLibs.add("${file("src/main/libs/arm64-v8a/libv8_nosnapshot.a")}".toString())
            ldLibs.add("${file("src/main/libs/arm64-v8a/libzip.a")}".toString())
        }
    }
//    android.productFlavors {
//        create("arm7") {
//            ndk.abiFilters.add("armeabi-v7a")
//        }
//
//        create ("arm8") {
//            ndk.abiFilters.add("arm64-v8a")
//        }
//
//        create ("x86-32") {
//            ndk.abiFilters.add("x86")
//        }
//
//         for detailed abiFilter descriptions, refer to "Supported ABIs" @
//         https://developer.android.com/ndk/guides/abis.html#sa
//         build one including all productFlavors
//        create("fat")
//    }

    repositories {
        prebuilt(PrebuiltLibraries) {
            v8 {
                headers.srcDir "src/main/jni/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libv8_base.a")
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libv8_libplatform.a")
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libv8_libbase.a")
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libv8_nosnapshot.a")
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libzip.a")
                }
            }
        }
    }
}

dependencies {
    compile project(':binding-generator')
}