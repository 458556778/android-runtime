println "Build.gradle running"

apply plugin: 'com.android.model.library'

buildscript {
    repositories {
       jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle-experimental:0.7.0-beta3'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.2"

        defaultConfig.with {
            minSdkVersion.apiLevel    = 9
            targetSdkVersion.apiLevel = 22
        }

        lintOptions.with {
            abortOnError = false
        }
    }

    android.ndk {
        moduleName = "NativeScript"
        
        
        cppFlags.addAll(["-I${file("src/main/jni")}".toString(),
                         "-I${file("src/main/jni/include")}".toString()
        ])

        cppFlags.addAll(["-std=c++11", "-fexceptions"])
        CFlags.addAll(["-Wno-error=format-security", "-g"])

        ldLibs.addAll(["android", "dl", "log", "atomic", "z"])

        stl = "stlport_static"

        abiFilters.addAll(["armeabi-v7a", "x86", "arm64-v8a"])
    }
    
    android.sources {
        main {
            java {
                source {
                    srcDirs 'src/main/java'
                }
            }

            jni {
                source {
                    srcDirs 'src/main/jni'
                }

                exportedHeaders {
                    srcDir "src/main/jni/include"
                }

                dependencies {
                    library "v8" linkage "static"
                }
            }
        }
    }
    
    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.txt'))
        }
    }

    android.abis {
        create("armeabi-v7a") {
            abiFilters.add("armeabi-v7a")
            
            ldLibs.add("${file("src/main/libs/armeabi-v7a/libv8_base.a")}".toString())
            ldLibs.add("${file("src/main/libs/armeabi-v7a/libv8_libplatform.a")}".toString())
            ldLibs.add("${file("src/main/libs/armeabi-v7a/libv8_libbase.a")}".toString())
            ldLibs.add("${file("src/main/libs/armeabi-v7a/libv8_nosnapshot.a")}".toString())
            ldLibs.add("${file("src/main/libs/armeabi-v7a/libzip.a")}".toString())
        }

        create("x86") {
            abiFilters.add("x86")
            
            ldLibs.add("${file("src/main/libs/x86/libv8_base.a")}".toString())
            ldLibs.add("${file("src/main/libs/x86/libv8_libplatform.a")}".toString())
            ldLibs.add("${file("src/main/libs/x86/libv8_libbase.a")}".toString())
            ldLibs.add("${file("src/main/libs/x86/libv8_nosnapshot.a")}".toString())
            ldLibs.add("${file("src/main/libs/x86/libzip.a")}".toString())
        }

        create("arm64-v8a") {
            abiFilters.add("arm64-v8a")
            
            ldFlags.addAll([
            "-L${file("src/main/libs/arm64-v8a")}".toString(),
            "-lv8_base",
            "-lv8_libplatform",
            "-lv8_libbase",
            "-lv8_nosnapshot",
            "-lzip"
            ])
            
            //ldFlags.add("-L ${file("src/main/libs/arm64-v8a")}" -l v8_base".toString())
            //ldFlags.add("-L ${file("src/main/libs/arm64-v8a")}" -l v8_libplatform".toString())
            //ldFlags.add("-L ${file("src/main/libs/arm64-v8a")}" -l v8_libbase".toString())
            //ldFlags.add("-L ${file("src/main/libs/arm64-v8a")}" -l v8_nosnapshot".toString())
            //ldFlags.add("-L ${file("src/main/libs/arm64-v8a")}" -l zip".toString())
            
            //ldLibs.add("${file("src/main/libs/arm64-v8a/libv8_base.a")}".toString())
            //ldLibs.add("${file("src/main/libs/arm64-v8a/libv8_libplatform.a")}".toString())
            //ldLibs.add("${file("src/main/libs/arm64-v8a/libv8_libbase.a")}".toString())
            //ldLibs.add("${file("src/main/libs/arm64-v8a/libv8_nosnapshot.a")}".toString())
            //ldLibs.add("${file("src/main/libs/arm64-v8a/libzip.a")}".toString())
        }
    }
    
    repositories {
        prebuilt(PrebuiltLibraries) {
            v8 {
                headers.srcDir "src/main/jni/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libv8_base.a")
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libv8_libplatform.a")
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libv8_libbase.a")
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libv8_nosnapshot.a")
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libzip.a")
                }
            }
        }
    }
}


dependencies {
   //compile project(':binding-generator')
}

